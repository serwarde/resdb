# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ConsistentHashing_pb2 as ConsistentHashing__pb2


class ConsistentHashingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.find_responsible_node = channel.unary_unary(
                '/ConsistentHashing/find_responsible_node',
                request_serializer=ConsistentHashing__pb2.ConsistentFindNodeRequest.SerializeToString,
                response_deserializer=ConsistentHashing__pb2.ConsistentFindNodeReply.FromString,
                )
        self.add_node = channel.unary_unary(
                '/ConsistentHashing/add_node',
                request_serializer=ConsistentHashing__pb2.NodeInformation.SerializeToString,
                response_deserializer=ConsistentHashing__pb2.AddNodeReply.FromString,
                )
        self.remove_node = channel.unary_unary(
                '/ConsistentHashing/remove_node',
                request_serializer=ConsistentHashing__pb2.NodeInformation.SerializeToString,
                response_deserializer=ConsistentHashing__pb2.RemoveNodeReply.FromString,
                )
        self.send_request = channel.unary_unary(
                '/ConsistentHashing/send_request',
                request_serializer=ConsistentHashing__pb2.ForwardingInforRequest.SerializeToString,
                response_deserializer=ConsistentHashing__pb2.SimpleReply.FromString,
                )
        self.brodcast = channel.unary_unary(
                '/ConsistentHashing/brodcast',
                request_serializer=ConsistentHashing__pb2.brodcastRequest.SerializeToString,
                response_deserializer=ConsistentHashing__pb2.SimpleReply.FromString,
                )
        self.replication = channel.unary_unary(
                '/ConsistentHashing/replication',
                request_serializer=ConsistentHashing__pb2.replicaitonRequest.SerializeToString,
                response_deserializer=ConsistentHashing__pb2.replicaitonReply.FromString,
                )
        self.get_request = channel.unary_unary(
                '/ConsistentHashing/get_request',
                request_serializer=ConsistentHashing__pb2.GeneralRequest.SerializeToString,
                response_deserializer=ConsistentHashing__pb2.SimpleReply.FromString,
                )


class ConsistentHashingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def find_responsible_node(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_node(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remove_node(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send_request(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def brodcast(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def replication(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_request(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConsistentHashingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'find_responsible_node': grpc.unary_unary_rpc_method_handler(
                    servicer.find_responsible_node,
                    request_deserializer=ConsistentHashing__pb2.ConsistentFindNodeRequest.FromString,
                    response_serializer=ConsistentHashing__pb2.ConsistentFindNodeReply.SerializeToString,
            ),
            'add_node': grpc.unary_unary_rpc_method_handler(
                    servicer.add_node,
                    request_deserializer=ConsistentHashing__pb2.NodeInformation.FromString,
                    response_serializer=ConsistentHashing__pb2.AddNodeReply.SerializeToString,
            ),
            'remove_node': grpc.unary_unary_rpc_method_handler(
                    servicer.remove_node,
                    request_deserializer=ConsistentHashing__pb2.NodeInformation.FromString,
                    response_serializer=ConsistentHashing__pb2.RemoveNodeReply.SerializeToString,
            ),
            'send_request': grpc.unary_unary_rpc_method_handler(
                    servicer.send_request,
                    request_deserializer=ConsistentHashing__pb2.ForwardingInforRequest.FromString,
                    response_serializer=ConsistentHashing__pb2.SimpleReply.SerializeToString,
            ),
            'brodcast': grpc.unary_unary_rpc_method_handler(
                    servicer.brodcast,
                    request_deserializer=ConsistentHashing__pb2.brodcastRequest.FromString,
                    response_serializer=ConsistentHashing__pb2.SimpleReply.SerializeToString,
            ),
            'replication': grpc.unary_unary_rpc_method_handler(
                    servicer.replication,
                    request_deserializer=ConsistentHashing__pb2.replicaitonRequest.FromString,
                    response_serializer=ConsistentHashing__pb2.replicaitonReply.SerializeToString,
            ),
            'get_request': grpc.unary_unary_rpc_method_handler(
                    servicer.get_request,
                    request_deserializer=ConsistentHashing__pb2.GeneralRequest.FromString,
                    response_serializer=ConsistentHashing__pb2.SimpleReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ConsistentHashing', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ConsistentHashing(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def find_responsible_node(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ConsistentHashing/find_responsible_node',
            ConsistentHashing__pb2.ConsistentFindNodeRequest.SerializeToString,
            ConsistentHashing__pb2.ConsistentFindNodeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def add_node(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ConsistentHashing/add_node',
            ConsistentHashing__pb2.NodeInformation.SerializeToString,
            ConsistentHashing__pb2.AddNodeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remove_node(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ConsistentHashing/remove_node',
            ConsistentHashing__pb2.NodeInformation.SerializeToString,
            ConsistentHashing__pb2.RemoveNodeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send_request(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ConsistentHashing/send_request',
            ConsistentHashing__pb2.ForwardingInforRequest.SerializeToString,
            ConsistentHashing__pb2.SimpleReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def brodcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ConsistentHashing/brodcast',
            ConsistentHashing__pb2.brodcastRequest.SerializeToString,
            ConsistentHashing__pb2.SimpleReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def replication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ConsistentHashing/replication',
            ConsistentHashing__pb2.replicaitonRequest.SerializeToString,
            ConsistentHashing__pb2.replicaitonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_request(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ConsistentHashing/get_request',
            ConsistentHashing__pb2.GeneralRequest.SerializeToString,
            ConsistentHashing__pb2.SimpleReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
